<PUBLIC:COMPONENT>

<PUBLIC:ATTACH EVENT="onclick" HANDLER="cancel" />
<PUBLIC:ATTACH EVENT="ondblclick" HANDLER="cancel" />
<PUBLIC:ATTACH EVENT="onmousedown" HANDLER="cancel" />
<PUBLIC:ATTACH EVENT="onmousemove" HANDLER="cancel" />
<PUBLIC:ATTACH EVENT="onmouseup" HANDLER="cancel" />

<PUBLIC:PROPERTY NAME="src" />
<PUBLIC:PROPERTY NAME="autoclose" />
<PUBLIC:PROPERTY NAME="pic" PUT="pPic" GET="gPic" />
<PUBLIC:PROPERTY NAME="cpic" PUT="pCPic" GET="gCPic" />
<PUBLIC:PROPERTY NAME="open" PUT="pOpen" GET="gOpen" />
<PUBLIC:PROPERTY NAME="text" PUT="pText" GET="gText" />
<PUBLIC:PROPERTY NAME="href" PUT="pHref" GET="gHref" />
<PUBLIC:PROPERTY NAME="target" PUT="pTarget" GET="gTarget" />

<PUBLIC:METHOD NAME="closechild" />
<PUBLIC:METHOD NAME="exch" />
<PUBLIC:METHOD NAME="load" />
<PUBLIC:METHOD NAME="srcLoad" />
<PUBLIC:METHOD NAME="fold" />

<SCRIPT TYPE="text/javascript">

function cancel() { event.cancelBubble=true;}

function pPic(v) { if(noc) fop.src=v; else { mo=v; fix();}} function gPic() { return noc?fop.src:mo;}
function pCPic(v) { mc=v; fix();} function gCPic() { return mc;}
function pOpen(v) {
	v=(v!=null||v!="false"&&v!=false); if(v&&!lod&&src!=null) v=!v;
	if(v!=ope) fold(); ope=v;} function gOpen() { return ope;}
function pText(v) { txt.title=v; txt.innerText=v;} function gText() { return txt.title;}
function pHref(v) { hre.href=v;} 
function gHref() { return hre.href;}
function pTarget(v) { hre.target=v;} function gTarget() { return hre.target;}

function closechild(c) {
	for(i=0;i<childNodes.length;i++) if(childNodes[i].nodeName=="tree"&&childNodes[i]!=c)
		if(!childNodes[i].noc&&childNodes[i].open) childNodes[i].fold();
}

function down(t) { tmp[0].outerHTML=t;}
function srcLoad() {
	removeChild(tmp[1]);
	for(i=0;i<childNodes.length;i++) if(childNodes[i].nodeName=="tree") {
		childNodes[i].style.display=style.display;
		if(childNodes[i].open) childNodes[i].fold();
	}
}

function fix() { if(nod.src.match(/ml?node.gif/)) fop.src=mo; else fop.src=mc;}
function exch() {
	if(nod.src.match(/ml?node.gif/)) { if(las) nod.src=f+"plnode.gif"; else nod.src=f+"pnode.gif";}
	else { if(las) nod.src=f+"mlnode.gif"; else nod.src=f+"mnode.gif";} ope=!ope; fix();
	if(ope&&obj.autoclose) obj.closechild(element);
}
function fold() {
	if(!lod) { lod=true; exch();
		for(i=0;i<childNodes.length;i++) if(childNodes[i].nodeName=="tree") {
			try { childNodes[i].style.display=style.display; childNodes[i].load();
			if(childNodes[i].open) childNodes[i].fold();} catch(e) {}
		}
		if(src!=null) {
			var dow=document.createElement("span");
			dow.style.behavior="url(#default#download)";
			dow.startDownload(src, down);
		}
	} else { exch();
		for(i=0;i<childNodes.length;i++) if(childNodes[i].nodeName=="tree")
			childNodes[i].style.display=childNodes[i].style.display!="block"?"block":"none";
	}
}

function load() {
	if(obj.nodeName=="tree"&&(obj.lastChild==element||
		obj.lastChild.previousSibling==element&&obj.src!=null)) las=true;
	if(las&&obj.src!=null&&!obj.open&&obj.lod) obj.exch();
	if(!noc) {
		nod.src=f+"pnode.gif"; fop.src=mc;
		if(obj.nodeName!="tree") fop.src=mo;
		nod.onclick=fold; nod.ondblclick=fold; fop.ondblclick=fold;
		insertBefore(hea, childNodes[0]); hea.appendChild(lin);
		if(obj.nodeName=="tree") {
			lin.innerHTML=obj.lin.innerHTML+((obj.parentNode.nodeName=="tree")?
				"<img  align='absmiddle' width=16 height=22 src='"+
				((obj.parentNode.lastChild==obj)?f+"bl.gif":f+"vl.gif")+"'>":"");
			if(las) nod.src=f+"plnode.gif"; hea.appendChild(nod);
		}
		hea.appendChild(fop); hre.appendChild(txt); hea.appendChild(hre);
	} else {
		nod.src=f+"node.gif"; if(!fop.src) fop.src=f+"folclose.gif";
		appendChild(hea); hea.appendChild(lin);
		if(obj.parentNode.nodeName=="tree") {
			lin.innerHTML=obj.lin.innerHTML+"<img  align='absmiddle' width=16 height=22 align='absmiddle' src='"+
				((obj.parentNode.lastChild==obj)?f+"bl.gif":f+"vl.gif")+"'>";
		}
		if(las) nod.src=f+"lnode.gif";
		hea.appendChild(nod); hre.appendChild(fop); hre.appendChild(txt); hea.appendChild(hre);
	}
	if(obj.lastChild.previousSibling==element&&obj.src!=null) obj.srcLoad();
}

var hea, lin, nod, lpk, fop, hre, txt;
var chi, blo, obj=parentNode, tmp;
var las=false, ope=false;
var f="images/", mc=f+"folclose.gif", mo=f+"folopen.gif";

hea=document.createElement("div"); hea.noWrap=true; hea.style.overflow="visible"; hea.style.textOverflow="ellipsis"; hea.style.width="100%";
nod=document.createElement("img"); nod.style.verticalAlign="bottom"; nod.width=16; nod.height=22;
fop=document.createElement("img"); fop.style.verticalAlign="bottom"; fop.border=0; fop.width=24; fop.height=22; 
lin=document.createElement("span");
hre=document.createElement("a"); 
hre.style.fontSize="9pt"; 
hre.style.color=style.color; 
style.color="";
txt=document.createElement("span");

if(src!=null) {
	innerHTML="<span style='display:block;'></span><plow:tree text='Loading...' />";
	tmp=[childNodes[0], childNodes[1]];
}

if(obj.nodeName=="tree") hre.target=obj.target; else hre.target=null;
style.display="block"; element.noc=!hasChildNodes(); element.lod=false;

autoclose=(autoclose!=null); if(obj.autoclose) autoclose=false;
if(obj.nodeName!="tree") { lod=ope=true; style.display="block"; load();}
if(obj.open&&obj.src==null) if(obj.style.display=="block") { style.display="block"; load();}
if(obj.src!=null) load();

blo=lin.lastChild; element.lin=lin;

</SCRIPT>
</PUBLIC:COMPONENT>