/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.myhotel.struts.action;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.Globals;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import cn.myhotel.model.Admins;
import cn.myhotel.model.AdminsDAO;
import cn.myhotel.model.Client;

import com.myhotel.struts.form.LoginForm;

/** 
 * MyEclipse Struts
 * 
 * XDoclet definition:
 * @struts.action path="/login" name="loginForm" input="/index.jsp" scope="request" validate="true"
 * @struts.action-forward name="success" path="/mainframe.html"
 */
public class LoginAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		LoginForm loginForm = (LoginForm) form;// TODO Auto-generated method stub
		AdminsDAO dao = new AdminsDAO();
		ActionMessages messages = this.getMessages(request);
		System.out.println(loginForm.getPassword());
		if(loginForm.getType().equals("admin"))
		{
			List list = dao.getSession().createQuery("from Admins where adminId = '"+loginForm.getUserId()+"' and password = '"+loginForm.getPassword()+"' and type = '"+loginForm.getType()+"'").list();
			if(list.size()==1)
			{
				Admins admin = (Admins)list.get(0);
				request.getSession().setAttribute("user",admin);
				dao.closeSession();
				return mapping.findForward("success");
			}
			else
			{
				messages.add(Globals.ERROR_KEY,new ActionMessage("login.failed"));
				this.addErrors(request, messages);
				dao.closeSession();
				return mapping.getInputForward();
			}
		}
		else
		{
			List list = dao.getSession().createQuery("from Client where clientId = '"+loginForm.getUserId()+"' and password = '"+loginForm.getPassword()+"' and type = '"+loginForm.getType()+"'").list();
			if(list.size()==1)
			{
				Client client = (Client)list.get(0);
				if(client.getIsused().equals("1"))
				{
					messages.add(Globals.ERROR_KEY,new ActionMessage("login.locked"));
					this.addErrors(request, messages);
					dao.closeSession();
					return mapping.getInputForward();
				}
				else
				{
					request.getSession().setAttribute("user",client);
					dao.closeSession();
					return mapping.findForward("success");
				}
			}
			else
			{
				messages.add(Globals.ERROR_KEY,new ActionMessage("login.failed"));
				this.addErrors(request, messages);
				dao.closeSession();
				return mapping.getInputForward();
			}
		}
	}
}