/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.myhotel.struts.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import cn.myhotel.model.Order1;
import cn.myhotel.model.Order1DAO;
import cn.myhotel.model.Order2;
import cn.myhotel.model.Room;
import cn.myhotel.model.Roomtype;
import cn.myhotel.object.Model;

import com.myhotel.struts.form.TongjiForm;

/** 
 * MyEclipse Struts
 * 
 * XDoclet definition:
 * @struts.action path="/admin/tongji" name="tongjiForm" input="/admin/tongji.jsp" scope="request" validate="true"
 * @struts.action-forward name="success" path="/admin/tongji.jsp"
 */
public class TongjiAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TongjiForm tongjiForm = (TongjiForm) form;// TODO Auto-generated method stub
		String date1 = tongjiForm.getDate1();
		String date2 = tongjiForm.getDate2();
		String roomId = tongjiForm.getRoomId();
		String typeId = tongjiForm.getTypeId();
		//String floor = tongjiForm.getFloor();
		String type = tongjiForm.getType();
		Order1DAO dao = new Order1DAO();
		List list = new ArrayList();
		if(type.equals("0"))
		{
			if(roomId.equals(""))
			{
				List alist = dao.getSession().createQuery("from Room").list();
				for(int i=0;i<alist.size();i++)
				{
					Room room = (Room)alist.get(i);
					Model model = new Model();
					model.setRoomId(room.getRoomId());
					model.setTypename(room.getRoomtype().getTypename());
					model.setFloor(room.getFloor().toString());
					int count = 0;
					double price = 0;
					Iterator it = room.getOrder1s().iterator();
					while(it.hasNext())
					{
						Order1 order1 = (Order1)it.next();
						if((order1.getRegdate().after(java.sql.Date.valueOf(date1))||order1.getRegdate().equals(java.sql.Date.valueOf(date1)))&&(order1.getRegdate().before(java.sql.Date.valueOf(date2))||order1.getRegdate().equals(java.sql.Date.valueOf(date2))))
						{
							if(order1.getDone().equals("1"))
							{
								count++;
								price += Double.parseDouble(order1.getPrice().toString())*Integer.parseInt(order1.getDatenum().toString());
							}
						}
					}
					it = room.getOrder2s().iterator();
					while(it.hasNext())
					{
						Order2 order2 = (Order2)it.next();
						if((order2.getRegdate().after(java.sql.Date.valueOf(date1))||order2.getRegdate().equals(java.sql.Date.valueOf(date1)))&&(order2.getRegdate().before(java.sql.Date.valueOf(date2))||order2.getRegdate().equals(java.sql.Date.valueOf(date2))))
						{
							if(order2.getIsused().equals("1"))
							{
								count++;
								price += Double.parseDouble(order2.getPrice().toString())*Integer.parseInt(order2.getDatenum().toString());
							}
						}
					}
					model.setNum(count);
					model.setPrice(price);
					list.add(model);
				}
				request.setAttribute("list1", list);
				
			}
			else
			{
				List alist = dao.getSession().createQuery("from Room where roomId = '"+roomId+"'").list();
				for(int i=0;i<alist.size();i++)
				{
					Room room = (Room)alist.get(i);
					Model model = new Model();
					model.setRoomId(room.getRoomId());
					model.setTypename(room.getRoomtype().getTypename());
					model.setFloor(room.getFloor().toString());
					int count = 0;
					double price = 0;
					Iterator it = room.getOrder1s().iterator();
					while(it.hasNext())
					{
						Order1 order1 = (Order1)it.next();
						if((order1.getRegdate().after(java.sql.Date.valueOf(date1))||order1.getRegdate().equals(java.sql.Date.valueOf(date1)))&&(order1.getRegdate().before(java.sql.Date.valueOf(date2))||order1.getRegdate().equals(java.sql.Date.valueOf(date2))))
						{
							if(order1.getDone().equals("1"))
							{
								count++;
								price += Double.parseDouble(order1.getPrice().toString())*Integer.parseInt(order1.getDatenum().toString());
							}
						}
					}
					it = room.getOrder2s().iterator();
					while(it.hasNext())
					{
						Order2 order2 = (Order2)it.next();
						if((order2.getRegdate().after(java.sql.Date.valueOf(date1))||order2.getRegdate().equals(java.sql.Date.valueOf(date1)))&&(order2.getRegdate().before(java.sql.Date.valueOf(date2))||order2.getRegdate().equals(java.sql.Date.valueOf(date2))))
						{
							if(order2.getIsused().equals("1"))
							{
								count++;
								price += Double.parseDouble(order2.getPrice().toString())*Integer.parseInt(order2.getDatenum().toString());
							}
						}
					}
					model.setNum(count);
					model.setPrice(price);
					list.add(model);
				}
				request.setAttribute("list1", list);
			}
		}
		else if(type.equals("1"))
		{
			if(typeId.equals("0"))
			{
				List alist = dao.getSession().createQuery("from Roomtype").list();
				for(int i=0;i<alist.size();i++)
				{
					Roomtype roomtype = (Roomtype)alist.get(i);
					Model model = new Model();
					model.setTypename(roomtype.getTypename());
					Set set = roomtype.getRooms();
					model.setNum(set.size());
					Iterator it1 = set.iterator();
					int count = 0;
					double price = 0;
					while(it1.hasNext())
					{
						Room room = (Room)it1.next();
						
						Iterator it = room.getOrder1s().iterator();
						while(it.hasNext())
						{
							Order1 order1 = (Order1)it.next();
							if((order1.getRegdate().after(java.sql.Date.valueOf(date1))||order1.getRegdate().equals(java.sql.Date.valueOf(date1)))&&(order1.getRegdate().before(java.sql.Date.valueOf(date2))||order1.getRegdate().equals(java.sql.Date.valueOf(date2))))
							{
								if(order1.getDone().equals("1"))
								{
									count++;
									price += Double.parseDouble(order1.getPrice().toString())*Integer.parseInt(order1.getDatenum().toString());
								}
							}
						}
						it = room.getOrder2s().iterator();
						while(it.hasNext())
						{
							Order2 order2 = (Order2)it.next();
							if((order2.getRegdate().after(java.sql.Date.valueOf(date1))||order2.getRegdate().equals(java.sql.Date.valueOf(date1)))&&(order2.getRegdate().before(java.sql.Date.valueOf(date2))||order2.getRegdate().equals(java.sql.Date.valueOf(date2))))
							{
								if(order2.getIsused().equals("1"))
								{
									count++;
									price += Double.parseDouble(order2.getPrice().toString())*Integer.parseInt(order2.getDatenum().toString());
								}
							}
						}
					}
					model.setPrice(price);
					list.add(model);
				}
				request.setAttribute("list2", list);
			}
			else
			{
				List alist = dao.getSession().createQuery("from Roomtype where id = " + typeId).list();
				for(int i=0;i<alist.size();i++)
				{
					Roomtype roomtype = (Roomtype)alist.get(i);
					Model model = new Model();
					model.setTypename(roomtype.getTypename());
					Set set = roomtype.getRooms();
					model.setNum(set.size());
					Iterator it1 = set.iterator();
					int count = 0;
					double price = 0;
					while(it1.hasNext())
					{
						Room room = (Room)it1.next();
						
						Iterator it = room.getOrder1s().iterator();
						while(it.hasNext())
						{
							Order1 order1 = (Order1)it.next();
							if((order1.getRegdate().after(java.sql.Date.valueOf(date1))||order1.getRegdate().equals(java.sql.Date.valueOf(date1)))&&(order1.getRegdate().before(java.sql.Date.valueOf(date2))||order1.getRegdate().equals(java.sql.Date.valueOf(date2))))
							{
								if(order1.getDone().equals("1"))
								{
									count++;
									price += Double.parseDouble(order1.getPrice().toString())*Integer.parseInt(order1.getDatenum().toString());
								}
							}
						}
						it = room.getOrder2s().iterator();
						while(it.hasNext())
						{
							Order2 order2 = (Order2)it.next();
							if((order2.getRegdate().after(java.sql.Date.valueOf(date1))||order2.getRegdate().equals(java.sql.Date.valueOf(date1)))&&(order2.getRegdate().before(java.sql.Date.valueOf(date2))||order2.getRegdate().equals(java.sql.Date.valueOf(date2))))
							{
								if(order2.getIsused().equals("1"))
								{
									count++;
									price += Double.parseDouble(order2.getPrice().toString())*Integer.parseInt(order2.getDatenum().toString());
								}
							}
						}
					}
					model.setPrice(price);
					list.add(model);
				}
				request.setAttribute("list2", list);
			}
		}
		
		return mapping.findForward("success");
	}
}