/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.myhotel.struts.action;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.struts.Globals;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Session;
import org.hibernate.Transaction;

import cn.myhotel.model.Order2;
import cn.myhotel.model.Order2DAO;
import cn.myhotel.model.Room;

import com.myhotel.struts.form.Addorder2Form;

/** 
 * MyEclipse Struts
 * 
 * XDoclet definition:
 * @struts.action path="/admin/addorder2" name="addorder2Form" input="/admin/addorder2.jsp" scope="request" validate="true"
 * @struts.action-forward name="success" path="/templates/message.jsp"
 */
public class Addorder2Action extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Addorder2Form addorder2Form = (Addorder2Form) form;// TODO Auto-generated method stub
		Order2DAO dao = new Order2DAO();
		Order2 order2 = new Order2();
		String mlink = "../admin/addorder2.jsp";
		String msg = "";
		
		List alist = dao.getSession().createQuery("from Badman where cardno = '"+addorder2Form.getCardno()+"'").list();
		if(alist.size()>0)
		{
			ActionMessages messages = this.getMessages(request);
			messages.add(Globals.ERROR_KEY,new ActionMessage("order2.addcardno"));
			this.addErrors(request, messages);
			dao.closeSession();
			return mapping.getInputForward();
		}
		
		try{
			BeanUtils.copyProperties(order2,addorder2Form);
		}catch(Exception e){
			e.printStackTrace();
		}
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		SimpleDateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
		String regdate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(Calendar.getInstance().getTime());
		try{
			order2.setRegdate(df.parse(regdate));
			order2.setBirth(df1.parse(addorder2Form.getDate1()));
		}catch(Exception e){
			e.printStackTrace();
		}
		order2.setIsused("0");
		Session session = dao.getSession();
		boolean passed = false;
		try{
			Transaction tx = session.beginTransaction();
			Room room = (Room)session.load(Room.class, Long.valueOf(addorder2Form.getRoomId()));
			if(addorder2Form.getPrice().equals(""))
				order2.setPrice(room.getRoomtype().getPrice());
			room.setIsused("1");
			order2.setRoom(room);
			session.saveOrUpdate(order2);
			session.update(room);
			tx.commit();
			passed = true;
		}catch(Exception e){
			passed = false;
			e.printStackTrace();
		}finally{
			session.close();
		}
		
		if(passed)
			msg = "保存数据成功！";
		else
			msg = "保存数据失败！";
		request.setAttribute("msg", msg);
		request.setAttribute("mlink", mlink);
		return mapping.findForward("success");
	}
}